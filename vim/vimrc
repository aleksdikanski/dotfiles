set nocompatible

" Colors {{{
syntax enable
set background=dark
colorscheme solarized
" }}}
" Spaces & Tabs {{{
set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set autoindent
filetype plugin indent on

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
endif " has("autocmd")

" Enable Indentation highlighting for tabbed indentation
set list lcs=tab:\Â¦\ 
" }}}
" UI {{{
set number
set showcmd
set title
set cursorline
set wildmenu
set lazyredraw
set showmatch
set guifont=Source\ Code\ Pro\ for\ Powerline,Light:h12
set ruler
set scrolloff=3
set listchars=tab:>-,trail:.
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
" }}}
" Buffers {{{
set hidden
" }}}
" Editing {{{
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" }}}
" Searching {{{
set incsearch
set hlsearch
set ignorecase
set smartcase
"}}}
" Command Line {{{
set history=1000
" }}}
" Remappings {{{
nnoremap j gj
nnoremap k gk

nmap <silent> <leader>s :set nolist!<CR>
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
" }}}
" Leader Shortcuts {{{
let mapleader="<"
" }}}
" Backups {{{
if has("vms")
    set nobackup " do not keep a backup file, use versions instead
else
    set backup
    set backupdir=~/.vim-tmp/,~/.tmp,~/tmp,/var/tmp/,/tmp
    set backupskip=/tmp/*,/private/tmp/*
    set directory=~/.vim-tmp/,~/.tmp/,~/tmp,/var/tmp,/tmp
    set writebackup
endif
" }}}
" Custom Functions {{{
" Open help files in separate tab
augroup HelpInTabs
    autocmd!
    autocmd BufEnter *.txt call HelpInNewTab()
augroup END

" Only apply to help files
function! HelpInNewTab ()
    if &buftype == 'help'
        " Convert the help window to a tab..
        execute "normal \<C-W>T"
    endif
endfunction

function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc
"}}}
" Custom Commands {{{
:command WQ wq
:command Wq wq
:command W w

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif
" }}}

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" vim:foldmethod=marker:foldlevel=0
