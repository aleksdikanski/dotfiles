" Plugins {{{1
set nocompatible

" Leader Shortcuts {{{1
let mapleader="<"
" Look and Feel {{{1
" Colors {{{2
" Deal with Colors in GUIs and Terminals{{{3
if !has('gui_running')
  set t_Co=256
endif
if (match($TERM, "-256color") != -1) && (match($TERM, "screen-256color") == 1)
  "screen does not (yet) support truecolor
  set termguicolors
endif
"Syntax highlighting{{{3
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
" Colorscheme {{{3
set background=dark
colorscheme solarized
" Fonts {{{2
set guifont=Source\ Code\ Pro\ for\ Powerline,Light:h12
" Editor UI {{{2
" Show line numbers 
set number
" Show position in file
set ruler
" Always show signs
set signcolumn=yes
" Show last command
set showcmd
" Set terminal window title to current file
set title
" Highlight the cursor's line
set cursorline
" Decent wildmenu
set wildmenu
set wildmode=list:longest
set wildignore=.hg,.svn,*~,*.png,*.jpg,*.gif,*.settings,Thumbs.db,*.min.js,*.swp,publish/*,intermediate/*,*.o,*.hi,Zend,vendor,.DS_Store
"
set lazyredraw
" show tabs only when multiple tabs available
set showtabline=1

set showmatch
set scrolloff=3
" Verbose
" set listchars=nbsp:¬,eol:¶,extends:»,precedes:«,tab:>-,trail:•
set listchars=tab:>-,trail:•
" Enable Indentation highlighting for tabbed indentation
"set list lcs=tab:\¦\ 
" Editor Settings {{{1
" Spaces & Tabs {{{2
set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set autoindent

filetype plugin indent on

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
endif " has("autocmd")

" Buffers {{{2
set hidden
" Editing {{{2
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" Searching {{{2
set incsearch
set hlsearch
set ignorecase
set smartcase
" center search results
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
" Splits{{{2
set splitright
set splitbelow
" Diffing{{{1
set diffopt+=iwhite
set diffopt+=algorithm:patience
set diffopt+=indent-heuristic
" Command Line {{{2
set history=1000
" Remappings {{{1
nnoremap j gj
nnoremap k gk

nmap <silent> <leader>l :set list!<CR>
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

nmap <silent> <leader>r :set relativenumber!<CR>

" Backups {{{1
if has("vms")
    set nobackup " do not keep a backup file, use versions instead
else
    set backup
    set backupdir=~/.vim-tmp/,~/.tmp,~/tmp,/var/tmp/,/tmp
    set backupskip=/tmp/*,/private/tmp/*
    set directory=~/.vim-tmp/,~/.tmp/,~/tmp,/var/tmp,/tmp
    set writebackup
endif
" Custom Functions {{{1
" Open help files in separate tab
augroup HelpInTabs
    autocmd!
    autocmd BufEnter *.txt call HelpInNewTab()
augroup END

" Only apply to help files
function! HelpInNewTab ()
    if &buftype == 'help'
        " Convert the help window to a tab..
        execute "normal \<C-W>T"
    endif
endfunction

function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc
" Custom Commands {{{1
:command WQ wq
:command Wq wq
:command W w

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" vim:foldmethod=marker:foldlevel=0
